<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Distimming the Doshes</title>
    <description>Suppose someone to assert: The gostak distims the doshes. You do not know what this means; nor do I. But if we assume that it is English, we know that the doshes are distimmed by the gostak. We know too that one distimmer of doshes is a gostak. If, moreover, the doshes are galloons, we know that some galloons are distimmed by the gostak. And so we may go on, and so we often do go on.
</description>
    <link>http://yourdomain.com/gostak/</link>
    <atom:link href="http://yourdomain.com/gostak/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 12 Nov 2014 19:41:18 +0100</pubDate>
    <lastBuildDate>Wed, 12 Nov 2014 19:41:18 +0100</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Bourbon, Neat and Bitters installation</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://neat.bourbon.io/&quot;&gt;Neat&lt;/a&gt; is a grid framework maintained by the &lt;a href=&quot;http://thoughtbot.com/&quot;&gt;Thoughtbot&lt;/a&gt; team. It is built on top of &lt;a href=&quot;http://bourbon.io/&quot;&gt;Bourbon&lt;/a&gt;, a library for &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt;, maintained also by the people at &lt;a href=&quot;http://thoughtbot.com/&quot;&gt;Thoughtbot&lt;/a&gt;. It can be installed to work with &lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass&lt;/a&gt; as well, but maybe you need to update your Compass version to 1.0.0 or newer. Previous releases of Compass do not support Sass 3.3 which is needed if you want to install the current version of the Bourbon gem. With that in mind, you might want to check which version is installed in your machine, before installing or updating any ruby gem. Just type &lt;code&gt;$ compass version&lt;/code&gt; from the command line and the output should contain which version of the Compass gem you are running.  &lt;/p&gt;

&lt;dl&gt;

  &lt;dt&gt;Not found&lt;/dt&gt;
  &lt;dd&gt;
    If the command returned a not found argument, you don&#39;t need to install Compass at all to work with Bourbon. I&#39;m not going to do it myself in this case, so apart from the configuration and installation of the compatible Ruby gems, I won&#39;t cover any other aspect of the Compass workflow. And I must admit also that I do not see many reasons to combine these two frameworks. One of the greatest advantages I&#39;ve found when working with Bourbon over Compass is the unobtrusive control and freedom that the framework provides you over any type of layout. It doesn&#39;t tie you to floating positioned layouts, or any other kind of inmutable approach for building your site. However and apart from the fact that I find myself most confortable when using a set of tools instead of another, I am aware that Compass is, and has been for some time, the framework most widely used to deploy Sass preprocessed stylesheets. This gives me a slight idea of the volume of projects that might depend on older versions of Sass, so I think that it&#39;s always a good thing to document the easy steps that can avoid you from having to troubleshoot errors.  Most of the time is a simple thing: you launch a new project, reconfigure your environment, go back to an older project and find something went wrong, check the syntax, downgrade packages, etc... But this can become a little time-consuming. 
  &lt;/dd&gt;

  &lt;dt&gt;Compass 1.0.0&lt;/dt&gt;
  &lt;dd&gt;
    Another possibility is that &lt;code&gt;$ compass version&lt;/code&gt; returned 1.0.0 or newer. In that case you are safe to go and install the Bourbon gem with &lt;code&gt;$ gem install bourbon&lt;/code&gt;. 
  &lt;/dd&gt;

  &lt;dt&gt;Older Compass (needed for this project)&lt;/dt&gt;
  &lt;dd&gt;
    If you need to run Bourbon with an older version of Compass or Sass you need to install bourbon 3.2.x. So instead of just typing &lt;code&gt;$ gem install bourbon&lt;/code&gt; which defaults to the latest stable release you can specify a version as in &lt;code&gt;$ gem install bourbon -v 3.2.3&lt;/code&gt; . In the case of Neat the release that is compatible with Sass 3.2 is neat 1.5.1 so running &lt;code&gt;$ gem install neat -v 1.5.1&lt;/code&gt; will do. Bitters can be installed normally with &lt;code&gt;$ gem install bitters&lt;/code&gt; since the gem is compatible with versions of Sass starting from Sass 3.0.0.

    &lt;ul&gt;
      &lt;li&gt;&amp;bull;  &lt;a href=&quot;https://github.com/thoughtbot/bourbon#requirements&quot;&gt;Bourbon&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&amp;bull;  &lt;a href=&quot;https://github.com/thoughtbot/neat#requirements&quot;&gt;Neat&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&amp;bull;  &lt;a href=&quot;https://github.com/thoughtbot/bitters#requirements&quot;&gt;Bitters&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;

  &lt;dt&gt;Older Compass (needed for different projects)&lt;/dt&gt;
  &lt;dd&gt;
    If the previous command returned Compass 0.12.6 or similar, but you are starting with a new project that does not require an old version of Compass, chances are that you might still need to run an old Compass projects that depends on Compass 0.12.6 and Sass 3.2. If this is the case but you still update your installation, you won&#39;t notice any incompatibility issue untill you run an old Compass project on Sass 3.3, which will prompt you with constant deprecation warnings and syntax errors.

    When collaborating on projects that require a group of people to work on the same files and track them with some kind of version control system this is a common problem. &lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt; is a tool that helps solving ruby dependencies. It can be installed as a Ruby gem with &lt;code&gt;$ gem install bundler&lt;/code&gt; and works in a similar way as other package management systems. If you want to specify a set of gems for a specific project, open a terminal session and cd to the root of your project, then just enter &lt;code&gt;$ bundle init&lt;/code&gt; and you will find a newly created Gemfile, that you can open with read/write permissions &lt;code&gt;$ sudo vi Gemfile&lt;/code&gt;. Add there the required dependencies, following the syntax below:

&lt;pre&gt;
  &lt;code class=&quot;gemspec&quot;&gt;
  gem &#39;compass&#39;, &#39;~&amp;gt;1.0.0&#39;
  gem &#39;sass&#39;
  gem &#39;bourbon&#39;
  gem &#39;neat&#39;
  gem &#39;bitters&#39;
  &lt;/code&gt;
&lt;/pre&gt;

    This file works in Ruby in a similar way the packaje.json works inside a Node.js project. As in a Node.js project running &lt;code&gt;$ npm install&lt;/code&gt; would launch npm, –node package manager– to start the installation of the dependencies especified in the package.json; with Bundler you&#39;d have to run &lt;code&gt;$ bundle install&lt;/code&gt;. This will launch the installer and solve any conflicts when matching your global Ruby installation to your local especification. Once the installation has completed you&#39;ll find a new file Gemfile.lock that contains a complete reference to the installation performed by Bundler. Add it to the staging area of your repository, so it is tracked next time you commit your changes. &lt;code&gt;$ git add Gemfile.lock&lt;/code&gt; 
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;!--&lt;pre&gt;
  &lt;code class=&quot;gemspec&quot;&gt;
    GEM
      remote: https://rubygems.org/
      specs:
        bitters (0.10.1)
          bourbon (&gt;= 3.2)
          sass (&gt;= 3.2)
          thor
        bourbon (4.0.2)
          sass (~&gt; 3.3)
          thor
        chunky_png (1.3.3)
        compass (1.0.1)
          chunky_png (~&gt; 1.2)
          compass-core (~&gt; 1.0.1)
          compass-import-once (~&gt; 1.0.5)
          rb-fsevent (&gt;= 0.9.3)
          rb-inotify (&gt;= 0.9)
          sass (&gt;= 3.3.13, &lt; 3.5)
        compass-core (1.0.1)
          multi_json (~&gt; 1.0)
          sass (&gt;= 3.3.0, &lt; 3.5)
        compass-import-once (1.0.5)
          sass (&gt;= 3.2, &lt; 3.5)
          ffi (1.9.6)
        multi_json (1.10.1)
          neat (1.7.0)
          bourbon (&gt;= 4.0)
        sass (&gt;= 3.3)
        rb-fsevent (0.9.4)
        rb-inotify (0.9.5)
          ffi (&gt;= 0.5.0)
        sass (3.4.7)
      thor (0.19.1)

  PLATFORMS
    ruby

  DEPENDENCIES
    bitters
    bourbon
    compass (~&gt; 1.0.0)
    neat
    sass


  &lt;/code&gt;
&lt;/pre&gt;--&gt;

&lt;p&gt;The last thing to comment in relation to Compass is that when installed with Bundler, to be sure that you are running the correct Compass version, you should run &lt;code&gt;$ bundle exec compass watch&lt;/code&gt; instead of &lt;code&gt;$ compass watch&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;To start using the Bourbon stack of tools run &lt;code&gt;$ bundle exec bourbon install --path=path/to/sass&lt;/code&gt; ,  &lt;code&gt;$ bundle exec neat install --path=path/to/sass&lt;/code&gt; and  &lt;code&gt;$ bundle exec bitters install --path=path/to/sass&lt;/code&gt;. Each of these three commands will create a folder containing the source files. It is important that you don’t make any modifications to these files. They contain the default parameters used by each of these tools, but since the variables are declared with the following sass syntax:&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;scss&quot;&gt;
  $variable-option: value !default; 
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The !default termination means that if the variable has no value assigned, it should default to the one especified here. So keeping these three folders untouched will keep you from having to commit them to a repository. Since Bundler has created a Gemfile.lock with the specific versions your project is running, anyone wanting to work on the same project would only have to clone the repository, run &lt;code&gt;$ bundle install&lt;/code&gt; and the three bundle exec commands mentioned above. &lt;/p&gt;

</description>
        <pubDate>Wed, 12 Nov 2014 20:17:00 +0100</pubDate>
        <link>http://yourdomain.com/gostak/sass/2014/11/12/bourbon-neat-and-bitters-installation.html</link>
        <guid isPermaLink="true">http://yourdomain.com/gostak/sass/2014/11/12/bourbon-neat-and-bitters-installation.html</guid>
        
        
        <category>sass</category>
        
      </item>
    
      <item>
        <title>Testing D3</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve --watch&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;d3_div&quot;&gt;

	&lt;script src=&quot;/gostak/scripts/d3.v3.min.js&quot;&gt;&lt;/script&gt;

	&lt;script&gt;

	var margin = {top: 20, right: 120, bottom: 20, left: 120},
	    width = 960 - margin.right - margin.left,
	    height = 800 - margin.top - margin.bottom;
	    
	var i = 0,
	    duration = 750,
	    root;

	var tree = d3.layout.tree()
	    .size([height, width]);

	var diagonal = d3.svg.diagonal()
	    .projection(function(d) { return [d.y, d.x]; });

	var svg = d3.select(&quot;.d3_div&quot;).append(&quot;svg&quot;)
	    .attr(&quot;width&quot;, width + margin.right + margin.left)
	    .attr(&quot;height&quot;, height + margin.top + margin.bottom)
	  .append(&quot;g&quot;)
	    .attr(&quot;transform&quot;, &quot;translate(&quot; + margin.left + &quot;,&quot; + margin.top + &quot;)&quot;);

	d3.json(&quot;/gostak/flare.json&quot;, function(error, flare) {
	  root = flare;
	  root.x0 = height / 2;
	  root.y0 = 0;

	  function collapse(d) {
	    if (d.children) {
	      d._children = d.children;
	      d._children.forEach(collapse);
	      d.children = null;
	    }
	  }

	  root.children.forEach(collapse);
	  update(root);
	});

	d3.select(self.frameElement).style(&quot;height&quot;, &quot;800px&quot;);

	function update(source) {

	  // Compute the new tree layout.
	  var nodes = tree.nodes(root).reverse(),
	      links = tree.links(nodes);

	  // Normalize for fixed-depth.
	  nodes.forEach(function(d) { d.y = d.depth * 180; });

	  // Update the nodes…
	  var node = svg.selectAll(&quot;g.node&quot;)
	      .data(nodes, function(d) { return d.id || (d.id = ++i); });

	  // Enter any new nodes at the parent&#39;s previous position.
	  var nodeEnter = node.enter().append(&quot;g&quot;)
	      .attr(&quot;class&quot;, &quot;node&quot;)
	      .attr(&quot;transform&quot;, function(d) { return &quot;translate(&quot; + source.y0 + &quot;,&quot; + source.x0 + &quot;)&quot;; })
	      .on(&quot;click&quot;, click);

	  nodeEnter.append(&quot;circle&quot;)
	      .attr(&quot;r&quot;, 1e-6)
	      .style(&quot;fill&quot;, function(d) { return d._children ? &quot;lightsteelblue&quot; : &quot;#fff&quot;; });

	  nodeEnter.append(&quot;text&quot;)
	      .attr(&quot;x&quot;, function(d) { return d.children || d._children ? -10 : 10; })
	      .attr(&quot;dy&quot;, &quot;.35em&quot;)
	      .attr(&quot;text-anchor&quot;, function(d) { return d.children || d._children ? &quot;end&quot; : &quot;start&quot;; })
	      .text(function(d) { return d.name; })
	      .style(&quot;fill-opacity&quot;, 1e-6);

	  // Transition nodes to their new position.
	  var nodeUpdate = node.transition()
	      .duration(duration)
	      .attr(&quot;transform&quot;, function(d) { return &quot;translate(&quot; + d.y + &quot;,&quot; + d.x + &quot;)&quot;; });

	  nodeUpdate.select(&quot;circle&quot;)
	      .attr(&quot;r&quot;, 4.5)
	      .style(&quot;fill&quot;, function(d) { return d._children ? &quot;lightsteelblue&quot; : &quot;#fff&quot;; });

	  nodeUpdate.select(&quot;text&quot;)
	      .style(&quot;fill-opacity&quot;, 1);

	  // Transition exiting nodes to the parent&#39;s new position.
	  var nodeExit = node.exit().transition()
	      .duration(duration)
	      .attr(&quot;transform&quot;, function(d) { return &quot;translate(&quot; + source.y + &quot;,&quot; + source.x + &quot;)&quot;; })
	      .remove();

	  nodeExit.select(&quot;circle&quot;)
	      .attr(&quot;r&quot;, 1e-6);

	  nodeExit.select(&quot;text&quot;)
	      .style(&quot;fill-opacity&quot;, 1e-6);

	  // Update the links…
	  var link = svg.selectAll(&quot;path.link&quot;)
	      .data(links, function(d) { return d.target.id; });

	  // Enter any new links at the parent&#39;s previous position.
	  link.enter().insert(&quot;path&quot;, &quot;g&quot;)
	      .attr(&quot;class&quot;, &quot;link&quot;)
	      .attr(&quot;d&quot;, function(d) {
	        var o = {x: source.x0, y: source.y0};
	        return diagonal({source: o, target: o});
	      });

	  // Transition links to their new position.
	  link.transition()
	      .duration(duration)
	      .attr(&quot;d&quot;, diagonal);

	  // Transition exiting nodes to the parent&#39;s new position.
	  link.exit().transition()
	      .duration(duration)
	      .attr(&quot;d&quot;, function(d) {
	        var o = {x: source.x, y: source.y};
	        return diagonal({source: o, target: o});
	      })
	      .remove();

	  // Stash the old positions for transition.
	  nodes.forEach(function(d) {
	    d.x0 = d.x;
	    d.y0 = d.y;
	  });
	}

	// Toggle children on click.
	function click(d) {
	  if (d.children) {
	    d._children = d.children;
	    d.children = null;
	  } else {
	    d.children = d._children;
	    d._children = null;
	  }
	  update(d);
	}

	&lt;/script&gt;

&lt;/div&gt;

&lt;p&gt;Lorem Ipsum. Just making sure the svg viewport does not overlap with the html. And blabla… This example is being used for testing jekyll and d3 https://github.com/mbostock/d3/wiki/Tree-Layout&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Nov 2014 03:26:00 +0100</pubDate>
        <link>http://yourdomain.com/gostak/d3/treelayout/2014/11/05/testing-D3.html</link>
        <guid isPermaLink="true">http://yourdomain.com/gostak/d3/treelayout/2014/11/05/testing-D3.html</guid>
        
        
        <category>d3</category>
        
        <category>treelayout</category>
        
      </item>
    
      <item>
        <title>Installing Ghost on OpenShift</title>
        <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;em&gt;This post is being written with the intention of keeping a personal record of the actions performed in my particular environment, meeting a set of conditions which I’m not sure I’ll be able to point out in every case. Including ruby, git and node.js version; operating system and so on. OpenShift provides plenty of documentation regarding these options which I will try to refer, and which I strongly recommend to consult before trying to perform any modification in any other particular environment.&lt;/em&gt; &lt;/p&gt;

&lt;h2 id=&quot;installation-and-configuration-of-the-client-tools&quot;&gt;Installation and configuration of the Client Tools&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.openshift.com/en/getting-started-client-tools.html&quot;&gt;Installing the Client Tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://access.redhat.com/documentation/en-US/OpenShift_Online/2.0/html/Client_Tools_Installation_Guide/index.html&quot;&gt;Extended documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have verified that Ruby and Git are available in our system we can install the OpenShift gem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo gem install rhc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the installation has completed, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rhc setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://access.redhat.com/documentation/en-US/OpenShift_Online/2.0/html/Client_Tools_Installation_Guide/Configuring_Client_Tools.html&quot;&gt;Configuration of the Client Tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ll be prompted to enter our login information. First we have to enter the email account that we have previously used to sign in to the OpenShift platform.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Login to openshift.redhat.com: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And next our password:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Login to openshift.redhat.com: email@account.com
Password:******
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For details on this process please refer to the link above. In a summarized way I think I was asked if I wanted to generate a token, which I accepted by typing yes and pressing enter. Then the wizard outputs the path in you local system where the configuration file that contains your credentials, has been created. Then when your SSH keys have been created, you are prompted with this question which I accepted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Your public ssh key must be uploaded to the OpenShift server to access code.
Upload now? (yes|no) yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And by the end of this process you are able to choose a domain.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Please enter a domain (letters and numbers only) |&amp;lt;none&amp;gt;|: MyDomain
Your domain name &#39;MyDomain&#39; has been successfully created
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;creating-the-ghost-application&quot;&gt;Creating the Ghost application&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://howtoinstallghost.com/how-to-install-ghost-on-openshift/&quot;&gt;How to install Ghost on OpenShift&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.openshift.com/quickstarts/ghost&quot;&gt;Quickstart reference&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/openshift-quickstart/openshift-ghost-quickstart&quot;&gt;Github repository of OpenShift’s Ghost code&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To setup Ghost as an application on your OpenShift’s account cd to the folder holding your other local projects. In my case &lt;code&gt;$ cd ~/Sites&lt;/code&gt; and type:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;em&gt;Where ghost will be the domain that will be followed by the domain chosen when configuring the client tools, both adding to something like ghost-mydomain.rhcloud.com which is the url where you will be able to access your Ghost application. As well as the name of the folder that will be created in your local system holding a cloned repository of the public site. You can change it to anything you prefer.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ rhc app create ghost nodejs-0.10 --env NODE_ENV=production --from-code https://github.com/openshift-quickstart/openshift-ghost-quickstart.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;running-the-application-locally&quot;&gt;Running the Application Locally&lt;/h3&gt;

&lt;p&gt;As explained in the README.md file of the Github repository linked above. The Ghost repository cloned to &lt;code&gt;~/Sites/ghost&lt;/code&gt; is missing two folders. If we open the .gitignore file from the root folder, we see they should be inside the content folder, so we can add them to our local installation since we aren’t facing the risk of overwritting any of them when pushing changes from local to the live site. So inside the content folder I added an images folder and a data folder. Then I removed the node_modules folder and added it to the beginning of the .gitignore file.&lt;/p&gt;

&lt;p&gt;If you log in to your OpenShift account and go to applications. You must see that you have one application called ghost. If you click on the name ghost. You enter to another very similar screen. In the right sidebar highlighted with red in the image next. If we click the link “Want to log in to your application?”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gostak/images/ssh-1.png&quot; alt=&quot;Screen Capture&quot; title=&quot;Screen Capture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we can select and paste the credentials we need to connect to our hosting with ssh they should be something like &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh 666ddddsgytsyvus@ghost-mydomain.rhcloud.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to check the version of Node.js that our server is running we can enter&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh 666ddddsgytsyvus@ghost-mydomain.rhcloud.com node -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That should output the node.js version. In my case the node.js version was 0.10.25. My local environment node.js version was verified by typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since I had to downgrade a version because I was running locally node v0.10.26 .I followed the next tutorial on how to install n which is an npm module for managing node.js versions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;em&gt;I do not fancy much this step. I can’t say yet if this can get me into further problems regarding my other local projects&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://theholmesoffice.com/node-js-fundamentals-how-to-upgrade-the-node-js-version/&quot;&gt;Node Version Management&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once I verified that my local node.js version was as well 0.10.25. I deleted my node_modules folder and typed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install --production
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point I could at last run the Ghost app locally without any errors showing up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I runned:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rm -r --cached .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the node_modules folder displayed as deleted from the git directory tree.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit -m &#39;added my custom theme&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;em&gt;To make sure that pushing the local repository to the public site didn’t break any of the installations I pushed a folder containing a custom theme.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I logged into my live site and was able to select the custom theme from the settings pannel without breaking anything. So the code was uploaded correctly.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Sep 2014 04:26:00 +0200</pubDate>
        <link>http://yourdomain.com/gostak/ghost/openshift/2014/09/29/Installing-Ghost-on-OpenShift.html</link>
        <guid isPermaLink="true">http://yourdomain.com/gostak/ghost/openshift/2014/09/29/Installing-Ghost-on-OpenShift.html</guid>
        
        
        <category>ghost</category>
        
        <category>openshift</category>
        
      </item>
    
  </channel>
</rss>
